name: Dev Publish

on:
  workflow_dispatch:

permissions: {}

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          persist-credentials: false
      - uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'npm'
      - run: npm ci
      - run: npm test
        env:
          FORCE_COLOR: 3
      - run: node scripts/prepublish-clean.mjs
      - uses: actions/upload-artifact@v4
        with:
          name: build-${{ github.run_id }}
          path: |
            build
            package.json
          retention-days: 1

  npm-publish:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      checks: read
      statuses: write
      contents: write
      packages: write
      id-token: write
    env:
      GOOGLE_NPM_REGISTRY: wombat-dressing-room.appspot.com
      GOOGLE_NPM_TOKEN: ${{ secrets.AUTH_TOKEN }}
      GH_NPM_REGISTRY: npm.pkg.github.com
      GH_NPM_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - uses: actions/checkout@v4
        with:
          persist-credentials: false
      - uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'npm'
      - name: Set zx version
        run: |
          echo SHA_SHORT=$(git rev-parse --short HEAD) >> $GITHUB_ENV
          echo ZX_VERSION=$(npm pkg get version | tr -d \") >> $GITHUB_ENV

      - uses: actions/download-artifact@v4
        with:
          name: build-${{ github.run_id }}

      - name: pushing to ${{ env.GOOGLE_NPM_REGISTRY }}
        run: |
          echo "//${{ env.GOOGLE_NPM_REGISTRY }}/:_authToken=$GOOGLE_NPM_TOKEN" >> .npmrc
          npm version ${{ env.ZX_VERSION }}-dev.${{ env.SHA_SHORT }} --no-git-tag-version
          npm publish --provenance --access=public --no-git-tag-version --tag dev

      - name: pushing to ${{ env.GH_NPM_REGISTRY }}
        run: |
          echo "//${{ env.GH_NPM_REGISTRY }}/:_authToken=$GH_NPM_TOKEN" >> .npmrc
          cat <<< $(jq '.name="@${{ github.repository }}"' package.json) > package.json
          npm publish --no-git-tag-version --access=public --no-git-tag-version --tag dev

      - name: pushing lite snapshot to ${{ env.GOOGLE_NPM_REGISTRY }}
        run: |
          echo "//${{ env.GOOGLE_NPM_REGISTRY }}/:_authToken=$GOOGLE_NPM_TOKEN" >> .npmrc
          cat <<< $(jq '.name="zx"' package.json) > package.json
          node scripts/prepublish-lite.mjs
          npm version ${{ env.ZX_VERSION }}-lite-dev.${{ env.SHA_SHORT }} --no-git-tag-version
          npm publish --provenance --access=public --no-git-tag-version --tag dev

  # https://docs.github.com/en/actions/use-cases-and-examples/publishing-packages/publishing-docker-images
  docker-publish:
    needs: build
    runs-on: ubuntu-latest
    # Defines two custom environment variables for the workflow. These are used for the Container registry domain, and a name for the Docker image that this workflow builds.
    env:
      REGISTRY: ghcr.io
      IMAGE_NAME: ${{ github.repository }}

    # Sets the permissions granted to the `GITHUB_TOKEN` for the actions in this job.
    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          persist-credentials: false

      - uses: actions/download-artifact@v4
        with:
          name: build-${{ github.run_id }}

      - name: Set zx version
        run: |
          echo SHA_SHORT=$(git rev-parse --short HEAD) >> $GITHUB_ENV
          echo ZX_VERSION=$(npm pkg get version | tr -d \") >> $GITHUB_ENV

      # Uses the `docker/login-action` action to log in to the Container registry using the account and password that will publish the packages. Once published, the packages are scoped to the account defined here.
      - name: Log in to the Container registry
        uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      # This step uses [docker/metadata-action](https://github.com/docker/metadata-action#about) to extract tags and labels that will be applied to the specified image. The `id` "meta" allows the output of this step to be referenced in a subsequent step. The `images` value provides the base name for the tags and labels.
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@902fa8ec7d6ecbf8d84d538b9b233a880e428804
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=sha
            type=semver,pattern={{version}},value=v${{ env.ZX_VERSION }}-dev.${{ env.SHA_SHORT }}
      # This step uses the `docker/build-push-action` action to build the image, based on your repository's `Dockerfile`. If the build succeeds, it pushes the image to GitHub Packages.
      # It uses the `context` parameter to define the build's context as the set of files located in the specified path. For more information, see [Usage](https://github.com/docker/build-push-action#usage) in the README of the `docker/build-push-action` repository.
      # It uses the `tags` and `labels` parameters to tag and label the image with the output from the "meta" step.
      - name: Build and push Docker image
        id: push
        uses: docker/build-push-action@471d1dc4e07e5cdedd4c2171150001c434f0b7a4
        with:
          context: ./
          file: ./dcr/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      # This step generates an artifact attestation for the image, which is an unforgeable statement about where and how it was built. It increases supply chain security for people who consume the image. For more information, see [Using artifact attestations to establish provenance for builds](/actions/security-guides/using-artifact-attestations-to-establish-provenance-for-builds).
      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v2
        with:
          subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME}}
          subject-digest: ${{ steps.push.outputs.digest }}
          push-to-registry: true
